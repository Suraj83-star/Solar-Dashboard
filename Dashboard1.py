# ЁЯУК Smart Irrigation Dashboard (Multilingual + Forecast + Enhanced UI)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from datetime import datetime

st.set_page_config(page_title="Smart Irrigation Dashboard", layout="wide")

# Load forecast data
df = pd.read_csv("3day_forecast_results.csv")
df['timestamp'] = pd.to_datetime(df['timestamp'])

# LANGUAGE SUPPORT
LANGUAGES = {
    'English': {
        'title': "ЁЯМЮ Solar Forecast for Smart Irrigation",
        'ghi_label': "Global Horizontal Irradiance (GHI) Forecast",
        'alert_title': "ЁЯЪи Irrigation Recommendations",
        'pump_on': "тЬЕ Turn on the Pump",
        'pump_off': "тЭМ Do not Pump",
        'chart_title': "Forecast vs Actual GHI",
        'metrics': ["ЁЯУЖ Days Forecasted", "ЁЯМдя╕П Max GHI", "ЁЯФД Alerts Issued"],
        'download': "ЁЯУе Download Forecast CSV",
        'best_time': "ЁЯХУ Best Time to Irrigate: 11 AM тАУ 2 PM",
        'energy_saving': "тЪб Estimated energy saved: тВ╣340",
        'lang_label': "Select Language"
    },
    'Marathi': {
        'title': "ЁЯМЮ рд╢рд╣рд╛рдгреНрдпрд╛ рд╕рд┐рдВрдЪрдирд╛рд╕рд╛рдареА рд╕реМрд░ рдЕрдВрджрд╛рдЬ",
        'ghi_label': "рд╕рдВрдкреВрд░реНрдг рдХреНрд╖реИрддрд┐рдЬ рд╡рд┐рдХрд┐рд░рдг (GHI) рдЪрд╛ рдЕрдВрджрд╛рдЬ",
        'alert_title': "ЁЯЪи рд╕рд┐рдВрдЪрдирд╛рд╕рд╛рдареА рд╕реВрдЪрдирд╛",
        'pump_on': "тЬЕ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░рд╛",
        'pump_off': "тЭМ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░реВ рдирдХрд╛",
        'chart_title': "GHI рдЕрдВрджрд╛рдЬ рд╡рд┐рд░реБрджреНрдз рд╡рд╛рд╕реНрддрд╡рд┐рдХ",
        'metrics': ["ЁЯУЖ рдЕрдВрджрд╛рдЬрд╛рдЪреЗ рджрд┐рд╡рд╕", "ЁЯМдя╕П рдЬрд╛рд╕реНрддреАрдд рдЬрд╛рд╕реНрдд GHI", "ЁЯФД рджрд┐рд▓реЗрд▓реЗ рдЕрд▓рд░реНрдЯ"],
        'download': "ЁЯУе CSV рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛",
        'best_time': "ЁЯХУ рд╕рд░реНрд╡реЛрддреНрддрдо рд╕рд┐рдВрдЪрди рд╡реЗрд│: рд╕рдХрд╛рд│реА 11 тАУ рджреБрдкрд╛рд░реА 2",
        'energy_saving': "тЪб рдмрдЪрдд рдЭрд╛рд▓реЗрд▓реА рдКрд░реНрдЬрд╛: тВ╣340",
        'lang_label': "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛"
    },
    'Hindi': {
        'title': "ЁЯМЮ рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рд▓рд┐рдП рд╕реМрд░ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        'ghi_label': "рдЧреНрд▓реЛрдмрд▓ рд╣реЙрд░рд┐рдЬреЙрдиреНрдЯрд▓ рдЗрд░реИрдбрд┐рдПрдВрд╕ (GHI) рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        'alert_title': "ЁЯЪи рд╕рд┐рдВрдЪрд╛рдИ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        'pump_on': "тЬЕ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░реЗрдВ",
        'pump_off': "тЭМ рдкрдВрдк рдЪрд╛рд▓реВ рди рдХрд░реЗрдВ",
        'chart_title': "рдЕрдиреБрдорд╛рдирд┐рдд рдмрдирд╛рдо рд╡рд╛рд╕реНрддрд╡рд┐рдХ GHI",
        'metrics': ["ЁЯУЖ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдЕрд╡рдзрд┐", "ЁЯМдя╕П рдЕрдзрд┐рдХрддрдо GHI", "ЁЯФД рдЕрд▓рд░реНрдЯ рдХреА рд╕рдВрдЦреНрдпрд╛"],
        'download': "ЁЯУе CSV рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        'best_time': "ЁЯХУ рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рд╕рд░реНрд╡реЛрддреНрддрдо рд╕рдордп: рд╕реБрдмрд╣ 11 тАУ рджреЛрдкрд╣рд░ 2",
        'energy_saving': "тЪб рдКрд░реНрдЬрд╛ рдХреА рдмрдЪрдд: тВ╣340",
        'lang_label': "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ"
    }
}

# Sidebar
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/3514/3514491.png", width=60)
selected_lang = st.sidebar.selectbox("ЁЯМР Language / рднрд╛рд╖рд╛ / рднрд╛рд╖рд╛", list(LANGUAGES.keys()))
labels = LANGUAGES[selected_lang]

# Title
st.title(labels['title'])

# GHI Forecast Plot with Confidence Intervals
st.subheader(labels['ghi_label'])

fig = go.Figure()
fig.add_trace(go.Scatter(x=df['timestamp'], y=df['forecasted_ghi'], mode='lines+markers', name='Forecasted GHI', line=dict(color='blue')))
if 'actual_ghi' in df.columns:
    fig.add_trace(go.Scatter(x=df['timestamp'], y=df['actual_ghi'], mode='lines', name='Actual GHI', line=dict(color='gray')))
fig.add_trace(go.Scatter(x=df['timestamp'], y=[500]*len(df), mode='lines', name='Threshold (500)', line=dict(color='red', dash='dash')))
fig.update_layout(title=labels['chart_title'], xaxis_title='Timestamp', yaxis_title='GHI (W/m┬▓)', template='plotly_white')
st.plotly_chart(fig, use_container_width=True)

# Irrigation Alert Table
df['alert_text'] = df['irrigation_alert'].map({1: labels['pump_on'], 0: labels['pump_off']})
st.subheader(labels['alert_title'])
st.dataframe(df[['timestamp', 'forecasted_ghi', 'alert_text']].rename(columns={
    'timestamp': 'ЁЯХТ Time',
    'forecasted_ghi': 'ЁЯФЖ Predicted GHI',
    'alert_text': 'ЁЯЪЬ Action'
}))

# Summary Insights
st.success(labels['best_time'])
st.warning(labels['energy_saving'])

# Key Metrics
col1, col2, col3 = st.columns(3)
col1.metric(labels['metrics'][0], "3")
col2.metric(labels['metrics'][1], f"{df['forecasted_ghi'].max():.0f} W/m┬▓")
col3.metric(labels['metrics'][2], f"{df['irrigation_alert'].sum()}")

# Download Button
st.download_button(
    label=labels['download'],
    data=df.to_csv(index=False).encode('utf-8'),
    file_name="ghi_forecast.csv",
    mime='text/csv'
)

# Footer
st.markdown("""
<style>
footer {visibility: hidden;}
.css-18e3th9 {padding-bottom: 2rem;}
</style>
""", unsafe_allow_html=True)

st.info("ЁЯТб Developed by Suraj Shah for rural solar irrigation planning тАУ April 2025")

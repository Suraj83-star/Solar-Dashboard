# ЁЯУК Solar GHI Forecast Dashboard for Farmers (Multilingual + Enhanced UI)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Load the forecast results (ensure this file is generated from your model)
df = pd.read_csv("3day_forecast_results.csv")
df['timestamp'] = pd.to_datetime(df['timestamp'])

# LANGUAGE OPTIONS
LANGUAGES = {
    'English': {
        'title': "ЁЯМЮ Solar Forecast for Smart Irrigation",
        'ghi_label': "Global Horizontal Irradiance (GHI) Forecast",
        'alert_title': "ЁЯЪи Irrigation Recommendations",
        'pump_on': "тЬЕ Turn on the Pump",
        'pump_off': "тЭМ Do not Pump",
        'chart_title': "Forecast vs Actual GHI",
        'lang_label': "Select Language"
    },
    'Marathi': {
        'title': "ЁЯМЮ рд╢рд╣рд╛рдгреНрдпрд╛ рд╕рд┐рдВрдЪрдирд╛рд╕рд╛рдареА рд╕реМрд░ рдЕрдВрджрд╛рдЬ",
        'ghi_label': "рд╕рдВрдкреВрд░реНрдг рдХреНрд╖реИрддрд┐рдЬ рд╡рд┐рдХрд┐рд░рдг (GHI) рдЪрд╛ рдЕрдВрджрд╛рдЬ",
        'alert_title': "ЁЯЪи рд╕рд┐рдВрдЪрдирд╛рд╕рд╛рдареА рд╕реВрдЪрдирд╛",
        'pump_on': "тЬЕ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░рд╛",
        'pump_off': "тЭМ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░реВ рдирдХрд╛",
        'chart_title': "GHI рдЕрдВрджрд╛рдЬ рд╡рд┐рд░реБрджреНрдз рд╡рд╛рд╕реНрддрд╡рд┐рдХ",
        'lang_label': "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛"
    },
    'Hindi': {
        'title': "ЁЯМЮ рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рд▓рд┐рдП рд╕реМрд░ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        'ghi_label': "рдЧреНрд▓реЛрдмрд▓ рд╣реЙрд░рд┐рдЬреЙрдиреНрдЯрд▓ рдЗрд░реИрдбрд┐рдПрдВрд╕ (GHI) рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        'alert_title': "ЁЯЪи рд╕рд┐рдВрдЪрд╛рдИ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        'pump_on': "тЬЕ рдкрдВрдк рдЪрд╛рд▓реВ рдХрд░реЗрдВ",
        'pump_off': "тЭМ рдкрдВрдк рдЪрд╛рд▓реВ рди рдХрд░реЗрдВ",
        'chart_title': "рдЕрдиреБрдорд╛рдирд┐рдд рдмрдирд╛рдо рд╡рд╛рд╕реНрддрд╡рд┐рдХ GHI",
        'lang_label': "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ"
    }
}

# SIDEBAR CONFIG
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/3514/3514491.png", width=60)
selected_lang = st.sidebar.selectbox("ЁЯМР Language / рднрд╛рд╖рд╛ / рднрд╛рд╖рд╛", list(LANGUAGES.keys()))
labels = LANGUAGES[selected_lang]

st.set_page_config(page_title="Smart Irrigation Dashboard", layout="wide")
st.title(labels['title'])

# GHI FORECAST PLOT
st.subheader(labels['ghi_label'])
fig = px.line(df, x='timestamp', y=['forecasted_ghi', 'actual_ghi'], labels={'value': 'GHI (W/m┬▓)', 'timestamp': 'Time'},
              title=labels['chart_title'])
st.plotly_chart(fig, use_container_width=True)

# IRRIGATION ALERTS
df['alert_text'] = df['irrigation_alert'].map({1: labels['pump_on'], 0: labels['pump_off']})
st.subheader(labels['alert_title'])
st.dataframe(df[['timestamp', 'forecasted_ghi', 'alert_text']].rename(columns={
    'timestamp': 'ЁЯХТ Time',
    'forecasted_ghi': 'ЁЯФЖ Predicted GHI',
    'alert_text': 'ЁЯЪЬ Action'
}))

# METRICS
st.markdown("---")
col1, col2, col3 = st.columns(3)
col1.metric("ЁЯУЖ Days Forecasted", "3")
col2.metric("ЁЯМдя╕П Max GHI", f"{df['forecasted_ghi'].max():.0f} W/m┬▓")
col3.metric("ЁЯФД Alerts Issued", f"{df['irrigation_alert'].sum()} times")

# FOOTER
st.markdown("""
<style>
footer {visibility: hidden;}
.css-18e3th9 {padding-bottom: 2rem;}
</style>
""", unsafe_allow_html=True)

st.info("Developed for rural empowerment using solar forecasting and AI")
